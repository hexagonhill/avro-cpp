/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This code was generated by avrogencpp 1.13.0. Do not edit.*/

#ifndef KK_3187154180_H
#define KK_3187154180_H


#include <sstream>
#include <any>
#include <utility>
#include "avro/Specific.hh"
#include "avro/DataFile.hh"
#include "avro/Encoder.hh"
#include "avro/Decoder.hh"

struct Conveyor {
    std::string Site;
    std::string Name;
    int64_t Width;
    int64_t Length;
    int64_t N;
    int64_t M;
    std::string Timestamp;
    Conveyor() :
        Site(std::string()),
        Name(std::string()),
        Width(int64_t()),
        Length(int64_t()),
        N(int64_t()),
        M(int64_t()),
        Timestamp(std::string())
        { }
};

struct t_json_Union__0__ {
private:
    size_t idx_;
    std::any value_;
public:
    /** enum representing union branches as returned by the idx() function */
    enum class Branch: size_t {
        Conveyor = 0,
        array = 1,
    };
    size_t idx() const { return idx_; }
    Branch branch() const { return static_cast<Branch>(idx_); }
    const Conveyor& get_Conveyor() const;
    Conveyor& get_Conveyor();
    void set_Conveyor(const Conveyor& v);
    void set_Conveyor(Conveyor&& v);
    const std::vector<float >& get_array() const;
    std::vector<float >& get_array();
    void set_array(const std::vector<float >& v);
    void set_array(std::vector<float >&& v);
    t_json_Union__0__();
};

inline
const Conveyor& t_json_Union__0__::get_Conveyor() const {
    if (idx_ != 0) {
        throw avro::Exception("Invalid type for union t_json_Union__0__");
    }
    return *std::any_cast<Conveyor >(&value_);
}

inline
Conveyor& t_json_Union__0__::get_Conveyor() {
    if (idx_ != 0) {
        throw avro::Exception("Invalid type for union t_json_Union__0__");
    }
    return *std::any_cast<Conveyor >(&value_);
}

inline
void t_json_Union__0__::set_Conveyor(const Conveyor& v) {
    idx_ = 0;
    value_ = v;
}

inline
void t_json_Union__0__::set_Conveyor(Conveyor&& v) {
    idx_ = 0;
    value_ = std::move(v);
}

inline
const std::vector<float >& t_json_Union__0__::get_array() const {
    if (idx_ != 1) {
        throw avro::Exception("Invalid type for union t_json_Union__0__");
    }
    return *std::any_cast<std::vector<float > >(&value_);
}

inline
std::vector<float >& t_json_Union__0__::get_array() {
    if (idx_ != 1) {
        throw avro::Exception("Invalid type for union t_json_Union__0__");
    }
    return *std::any_cast<std::vector<float > >(&value_);
}

inline
void t_json_Union__0__::set_array(const std::vector<float >& v) {
    idx_ = 1;
    value_ = v;
}

inline
void t_json_Union__0__::set_array(std::vector<float >&& v) {
    idx_ = 1;
    value_ = std::move(v);
}

inline t_json_Union__0__::t_json_Union__0__() : idx_(0), value_(Conveyor()) { }
namespace avro {
template<> struct codec_traits<Conveyor> {
    static void encode(Encoder& e, const Conveyor& v) {
        avro::encode(e, v.Site);
        avro::encode(e, v.Name);
        avro::encode(e, v.Width);
        avro::encode(e, v.Length);
        avro::encode(e, v.N);
        avro::encode(e, v.M);
        avro::encode(e, v.Timestamp);
    }
    static void decode(Decoder& d, Conveyor& v) {
        if (avro::ResolvingDecoder *rd =
            dynamic_cast<avro::ResolvingDecoder *>(&d)) {
            const std::vector<size_t> fo = rd->fieldOrder();
            for (std::vector<size_t>::const_iterator it = fo.begin();
                it != fo.end(); ++it) {
                switch (*it) {
                case 0:
                    avro::decode(d, v.Site);
                    break;
                case 1:
                    avro::decode(d, v.Name);
                    break;
                case 2:
                    avro::decode(d, v.Width);
                    break;
                case 3:
                    avro::decode(d, v.Length);
                    break;
                case 4:
                    avro::decode(d, v.N);
                    break;
                case 5:
                    avro::decode(d, v.M);
                    break;
                case 6:
                    avro::decode(d, v.Timestamp);
                    break;
                default:
                    break;
                }
            }
        } else {
            avro::decode(d, v.Site);
            avro::decode(d, v.Name);
            avro::decode(d, v.Width);
            avro::decode(d, v.Length);
            avro::decode(d, v.N);
            avro::decode(d, v.M);
            avro::decode(d, v.Timestamp);
        }
    }
};

template<> struct codec_traits<t_json_Union__0__> {
    static void encode(Encoder& e, t_json_Union__0__ v) {
        e.encodeUnionIndex(v.idx());
        switch (v.idx()) {
        case 0:
            avro::encode(e, v.get_Conveyor());
            break;
        case 1:
            avro::encode(e, v.get_array());
            break;
        }
    }
    static void decode(Decoder& d, t_json_Union__0__& v) {
        size_t n = d.decodeUnionIndex();
        if (n >= 2) { throw avro::Exception("Union index too big"); }
        switch (n) {
        case 0:
            {
                Conveyor vv;
                avro::decode(d, vv);
                v.set_Conveyor(std::move(vv));
            }
            break;
        case 1:
            {
                std::vector<float > vv;
                avro::decode(d, vv);
                v.set_array(std::move(vv));
            }
            break;
        }
    }
};

}

int main(int argn, char **argv)
{
    std::cout << argv[1] << '\n';
    avro::DataFileReader<t_json_Union__0__> data(argv[1]);
    t_json_Union__0__ c2;
    data.read(c2);
    t_json_Union__0__ c3;
    data.read(c3);
    
    return 0;
}

#endif
